stages:
  download_kaggle:
    cmd: 'python -c "from src.download import download_kaggle; download_kaggle(exec_func=True)" '
    params:
    - download_kaggle
    outs:
    - dataset
  DataPreprocessor:
    cmd: "python -c \"from src.process import DataPreprocessor; DataPreprocessor.load(name='DataPreprocessor').run_and_save()\"\
      \ "
    deps:
    - dataset
    params:
    - DataPreprocessor
    outs:
    - nodes/DataPreprocessor/outs.json
  MLModel:
    cmd: "python -c \"from src.train import MLModel; MLModel.load(name='MLModel').run_and_save()\"\
      \ "
    deps:
    - nodes/DataPreprocessor/outs.json
    params:
    - MLModel
    outs:
    - nodes/MLModel/model
    metrics:
    - nodes/MLModel/metrics_no_cache.json:
        cache: false
    plots:
    - nodes/MLModel/training_history.csv:
        cache: false
  test_data:
    cmd: "python -c \"from src.process import DataPreprocessor; DataPreprocessor.load(name='test_data').run_and_save()\"\
      \ "
    deps:
    - dataset
    params:
    - test_data
    outs:
    - nodes/test_data/outs.json
  EvaluateModel:
    cmd: "python -c \"from src.evaluate import EvaluateModel; EvaluateModel.load(name='EvaluateModel').run_and_save()\"\
      \ "
    deps:
    - nodes/MLModel/metrics_no_cache.json
    - nodes/MLModel/model
    - nodes/MLModel/training_history.csv
    - nodes/test_data/outs.json
    metrics:
    - nodes/EvaluateModel/metrics_no_cache.json:
        cache: false
    plots:
    - nodes/EvaluateModel/confusion_matrix.csv:
        cache: false
        template: confusion
        x: predicted
        y: actual
